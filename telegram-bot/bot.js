require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.TELEGRAM_ADMIN_BOT_TOKEN;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const ADMIN_CHAT_ID = process.env.TELEGRAM_ADMIN_CHAT_ID;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!BOT_TOKEN || !SUPABASE_URL || !SUPABASE_SERVICE_KEY || !ADMIN_CHAT_ID) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.error('BOT_TOKEN:', BOT_TOKEN ? '‚úÖ' : '‚ùå');
  console.error('SUPABASE_URL:', SUPABASE_URL ? '‚úÖ' : '‚ùå');
  console.error('SUPABASE_SERVICE_KEY:', SUPABASE_SERVICE_KEY ? '‚úÖ' : '‚ùå');
  console.error('ADMIN_CHAT_ID:', ADMIN_CHAT_ID ? '‚úÖ' : '‚ùå');
  console.error('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:');
  console.error('1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram');
  console.error('2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env –∫–∞–∫ TELEGRAM_ADMIN_BOT_TOKEN');
  console.error('3. –£–∑–Ω–∞–π—Ç–µ –≤–∞—à Chat ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ @userinfobot) –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–∫ TELEGRAM_ADMIN_CHAT_ID');
  console.error('4. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ Supabase –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
if (!BOT_TOKEN.match(/^\d+:[A-Za-z0-9_-]{35}$/)) {
  console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞!');
  console.error('–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç: 123456789:ABCdefGHIjklMNOpqrSTUvwxYZ123456789');
  console.error('–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ @BotFather –≤ Telegram');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
const ADD_PRODUCT_STATES = {
  WAITING_NAME: 'waiting_name',
  WAITING_PRICE: 'waiting_price',
  WAITING_FAKE_PRICE: 'waiting_fake_price',
  WAITING_CATEGORY: 'waiting_category',
  WAITING_SUBCATEGORY: 'waiting_subcategory',
  WAITING_COLOR: 'waiting_color',
  WAITING_BRAND: 'waiting_brand',
  WAITING_DESCRIPTION: 'waiting_description',
  WAITING_SIZES: 'waiting_sizes',
  WAITING_STOCK: 'waiting_stock',
  WAITING_MEASUREMENTS_SIZE: 'waiting_measurements_size',
  WAITING_MEASUREMENTS_VALUES: 'waiting_measurements_values',
  WAITING_IMAGES: 'waiting_images',
  WAITING_FEATURES: 'waiting_features',
  WAITING_IS_NEW: 'waiting_is_new',
  CONFIRM: 'confirm'
};

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
const EDIT_PRODUCT_STATES = {
  WAITING_PRODUCT_ID: 'waiting_product_id',
  WAITING_FIELD: 'waiting_field',
  WAITING_VALUE: 'waiting_value'
};

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
const PROMO_CODE_STATES = {
  WAITING_CODE: 'waiting_code',
  WAITING_NAME: 'waiting_name',
  WAITING_DESCRIPTION: 'waiting_description',
  WAITING_DISCOUNT_TYPE: 'waiting_discount_type',
  WAITING_DISCOUNT_VALUE: 'waiting_discount_value',
  WAITING_MIN_ORDER: 'waiting_min_order',
  WAITING_MIN_ITEMS: 'waiting_min_items',
  WAITING_CATEGORIES: 'waiting_categories',
  WAITING_MAX_USES: 'waiting_max_uses',
  WAITING_VALID_UNTIL: 'waiting_valid_until',
  CONFIRM: 'confirm'
};

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
const CATEGORIES = [
  'shirts', 'sweaters', 'jeans', 'shorts', 'accessories', 'shoes'
];

// –†–∞–∑–º–µ—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
const SIZES_BY_CATEGORY = {
  'shirts': ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
  'sweaters': ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
  'jeans': ['26', '27', '28', '29', '30', '31', '32', '33', '34', '36', '38'],
  'shorts': ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
  'accessories': ['One Size'],
  'shoes': ['35', '36', '37', '38', '39', '40', '41', '42', '43', '44']
};

// –ó–∞–º–µ—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∫–∞–∫–∏–µ –∑–∞–º–µ—Ä—ã –Ω—É–∂–Ω—ã)
const MEASUREMENTS_BY_CATEGORY = {
  'shirts': ['A', 'B', 'C'], // A-—à–∏—Ä–∏–Ω–∞, B-–¥–ª–∏–Ω–∞, C-—Ä—É–∫–∞–≤
  'sweaters': ['A', 'B', 'C', 'D'], // A-—à–∏—Ä–∏–Ω–∞, B-–¥–ª–∏–Ω–∞, C-—Ä—É–∫–∞–≤, D-–∫–∞–ø—é—à–æ–Ω
  'jeans': ['A', 'B', 'C', 'D'], // A-—Ç–∞–ª–∏—è, B-–¥–ª–∏–Ω–∞, C-–±–µ–¥—Ä–∞, D-–¥–ª–∏–Ω–∞ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É —à–≤—É
  'shorts': ['A', 'B', 'C'], // A-—Ç–∞–ª–∏—è, B-–¥–ª–∏–Ω–∞, C-–±–µ–¥—Ä–∞
  'accessories': [], // –ë–µ–∑ –∑–∞–º–µ—Ä–æ–≤
  'shoes': ['A', 'B'] // A-–¥–ª–∏–Ω–∞ —Å—Ç–æ–ø—ã, B-—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ø—ã
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(chatId) {
  return chatId.toString() === ADMIN_CHAT_ID;
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
  return {
    reply_markup: {
      keyboard: [
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'],
        ['üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏', 'üëÅÔ∏è –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä'],
        ['üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
        ['‚ùå –û—Ç–º–µ–Ω–∞']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  };
}

// –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function getCategoryMenu() {
  const keyboard = [];
  for (let i = 0; i < CATEGORIES.length; i += 2) {
    const row = [CATEGORIES[i]];
    if (CATEGORIES[i + 1]) row.push(CATEGORIES[i + 1]);
    keyboard.push(row);
  }
  keyboard.push(['‚ùå –û—Ç–º–µ–Ω–∞']);
  
  return {
    reply_markup: {
      keyboard,
      resize_keyboard: true,
      one_time_keyboard: true
    }
  };
}

// –ú–µ–Ω—é —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getSizesMenu(category) {
  const sizes = SIZES_BY_CATEGORY[category] || ['XS', 'S', 'M', 'L', 'XL'];
  const keyboard = [];
  
  for (let i = 0; i < sizes.length; i += 3) {
    const row = sizes.slice(i, i + 3);
    keyboard.push(row);
  }
  keyboard.push(['‚úÖ –ì–æ—Ç–æ–≤–æ', '‚ùå –û—Ç–º–µ–Ω–∞']);
  
  return {
    reply_markup: {
      keyboard,
      resize_keyboard: true,
      one_time_keyboard: false
    }
  };
}

// –ú–µ–Ω—é –¥–∞/–Ω–µ—Ç
function getYesNoMenu() {
  return {
    reply_markup: {
      keyboard: [
        ['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  };
}

// –ú–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
function getPromoCodeMenu() {
  return {
    reply_markup: {
      keyboard: [
        ['‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤'],
        ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'],
        ['‚ùå –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  };
}

// –ú–µ–Ω—é —Ç–∏–ø–æ–≤ —Å–∫–∏–¥–∫–∏
function getDiscountTypeMenu() {
  return {
    reply_markup: {
      keyboard: [
        ['üìä –ü—Ä–æ—Ü–µ–Ω—Ç (%)', 'üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ (—Ä—É–±.)'],
        ['‚ùå –û—Ç–º–µ–Ω–∞']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  };
}
// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  if (!isAdmin(chatId)) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
    return;
  }
  
  bot.sendMessage(chatId, 
    'üõçÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è KUSTORE!*\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
    { ...getMainMenu(), parse_mode: 'Markdown' }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  if (!isAdmin(chatId)) return;
  
  const userState = userStates.get(chatId) || {};
  
  try {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä') {
      await startAddProduct(chatId);
    } else if (text === '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä') {
      await startEditProduct(chatId);
    } else if (text === 'üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏') {
      await showPromoCodeMenu(chatId);
    } else if (text === 'üëÅÔ∏è –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä') {
      await startHideProduct(chatId);
    } else if (text === 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤') {
      await showProductsList(chatId);
    } else if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
      await showStatistics(chatId);
    } else if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
      userStates.delete(chatId);
      bot.sendMessage(chatId, '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', getMainMenu());
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    else if (userState.action === 'add_product') {
      await handleAddProductState(chatId, text, userState);
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    else if (userState.action === 'edit_product') {
      await handleEditProductState(chatId, text, userState);
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    else if (userState.action === 'promo_menu') {
      await handlePromoMenuState(chatId, text, userState);
    }
    else if (userState.action === 'add_promo') {
      await handleAddPromoState(chatId, text, userState);
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞
    else if (userState.action === 'hide_product') {
      await handleHideProductState(chatId, text, userState);
    }
  } catch (error) {
    console.error('Error handling message:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    userStates.delete(chatId);
  }
});

// –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function startAddProduct(chatId) {
  userStates.set(chatId, {
    action: 'add_product',
    state: ADD_PRODUCT_STATES.WAITING_NAME,
    product: {}
  });
  
  bot.sendMessage(chatId, 
    '‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞*\n\n' +
    'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', 
    { parse_mode: 'Markdown' }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function handleAddProductState(chatId, text, userState) {
  const { state, product } = userState;
  
  switch (state) {
    case ADD_PRODUCT_STATES.WAITING_NAME:
      product.name = text;
      userState.state = ADD_PRODUCT_STATES.WAITING_PRICE;
      bot.sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):');
      break;
      
    case ADD_PRODUCT_STATES.WAITING_PRICE:
      const price = parseFloat(text);
      if (isNaN(price) || price <= 0) {
        bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):');
        return;
      }
      product.real_price = price;
      userState.state = ADD_PRODUCT_STATES.WAITING_FAKE_PRICE;
      bot.sendMessage(chatId, 
        'üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞—á–µ—Ä–∫–Ω—É—Ç—É—é —Ü–µ–Ω—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ä–µ–∞–ª—å–Ω–æ–π):'
      );
      break;
      
    case ADD_PRODUCT_STATES.WAITING_FAKE_PRICE:
      const fakePrice = parseFloat(text);
      if (isNaN(fakePrice) || fakePrice <= product.real_price) {
        bot.sendMessage(chatId, '‚ùå –ó–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã:');
        return;
      }
      product.fake_original_price = fakePrice;
      userState.state = ADD_PRODUCT_STATES.WAITING_CATEGORY;
      bot.sendMessage(chatId, 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:', getCategoryMenu());
      break;
      
    case ADD_PRODUCT_STATES.WAITING_CATEGORY:
      if (!CATEGORIES.includes(text)) {
        bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:', getCategoryMenu());
        return;
      }
      product.category = text;
      userState.state = ADD_PRODUCT_STATES.WAITING_SUBCATEGORY;
      bot.sendMessage(chatId, 
        'üìÅ –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∫ateg–æ—Ä–∏—é (–∏–ª–∏ "–Ω–µ—Ç" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞):'
      );
      break;
      
    case ADD_PRODUCT_STATES.WAITING_SUBCATEGORY:
      if (text.toLowerCase() !== '–Ω–µ—Ç') {
        product.subcategory = text;
      }
      userState.state = ADD_PRODUCT_STATES.WAITING_COLOR;
      bot.sendMessage(chatId, 'üé® –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ "–Ω–µ—Ç"):');
      break;
      
    case ADD_PRODUCT_STATES.WAITING_COLOR:
      if (text.toLowerCase() !== '–Ω–µ—Ç') {
        product.color = text;
      }
      userState.state = ADD_PRODUCT_STATES.WAITING_BRAND;
      bot.sendMessage(chatId, 'üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "KUSTORE"):');
      break;
      
    case ADD_PRODUCT_STATES.WAITING_BRAND:
      product.brand = text === '–Ω–µ—Ç' ? 'KUSTORE' : text;
      userState.state = ADD_PRODUCT_STATES.WAITING_DESCRIPTION;
      bot.sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
      break;
      
    case ADD_PRODUCT_STATES.WAITING_DESCRIPTION:
      product.description = text;
      userState.state = ADD_PRODUCT_STATES.WAITING_SIZES;
      userState.selectedSizes = [];
      bot.sendMessage(chatId, 
        'üìè –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã (–Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä—ã, –∑–∞—Ç–µ–º "–ì–æ—Ç–æ–≤–æ"):', 
        getSizesMenu(product.category)
      );
      break;
      
    case ADD_PRODUCT_STATES.WAITING_SIZES:
      if (text === '‚úÖ –ì–æ—Ç–æ–≤–æ') {
        if (userState.selectedSizes.length === 0) {
          bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä!');
          return;
        }
        product.sizes = userState.selectedSizes;
        userState.state = ADD_PRODUCT_STATES.WAITING_STOCK;
        userState.stockIndex = 0;
        bot.sendMessage(chatId, 
          `üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${product.sizes[0]}:`
        );
      } else if (SIZES_BY_CATEGORY[product.category]?.includes(text)) {
        if (!userState.selectedSizes.includes(text)) {
          userState.selectedSizes.push(text);
          bot.sendMessage(chatId, `‚úÖ –†–∞–∑–º–µ—Ä ${text} –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã–±—Ä–∞–Ω–æ: ${userState.selectedSizes.join(', ')}`);
        }
      }
      break;
      
    case ADD_PRODUCT_STATES.WAITING_STOCK:
      const stock = parseInt(text);
      if (isNaN(stock) || stock < 0) {
        bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ >= 0):');
        return;
      }
      
      if (!product.stock_quantity) product.stock_quantity = {};
      product.stock_quantity[product.sizes[userState.stockIndex]] = stock;
      
      userState.stockIndex++;
      if (userState.stockIndex < product.sizes.length) {
        bot.sendMessage(chatId, 
          `üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${product.sizes[userState.stockIndex]}:`
        );
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –∑–∞–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const needsMeasurements = MEASUREMENTS_BY_CATEGORY[product.category] && 
                                 MEASUREMENTS_BY_CATEGORY[product.category].length > 0;
        
        if (needsMeasurements) {
          userState.state = ADD_PRODUCT_STATES.WAITING_MEASUREMENTS_VALUES;
          userState.measurementIndex = 0;
          userState.currentMeasurements = {};
          bot.sendMessage(chatId, 
            `üìè –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –∑–∞–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${product.sizes[0]}\n\n` +
            `–ù—É–∂–Ω—ã–µ –∑–∞–º–µ—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${product.category}": ${MEASUREMENTS_BY_CATEGORY[product.category].join(', ')}\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ä A –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 52.5):`
          );
        } else {
          userState.state = ADD_PRODUCT_STATES.WAITING_IMAGES;
          bot.sendMessage(chatId, 
            'üñºÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n' +
            '–ü—Ä–∏–º–µ—Ä: /images/products/shirts/shirt1.jpg, /images/products/shirts/shirt2.jpg'
          );
        }
      }
      break;
      
    case ADD_PRODUCT_STATES.WAITING_MEASUREMENTS_VALUES:
      const measurementValue = parseFloat(text);
      if (isNaN(measurementValue) || measurementValue <= 0) {
        bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–º–µ—Ä–∞ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):');
        return;
      }
      
      const currentSize = product.sizes[Math.floor(userState.measurementIndex / MEASUREMENTS_BY_CATEGORY[product.category].length)];
      const currentMeasurement = MEASUREMENTS_BY_CATEGORY[product.category][userState.measurementIndex % MEASUREMENTS_BY_CATEGORY[product.category].length];
      
      if (!userState.currentMeasurements[currentSize]) {
        userState.currentMeasurements[currentSize] = {};
      }
      userState.currentMeasurements[currentSize][currentMeasurement] = measurementValue;
      
      userState.measurementIndex++;
      
      const totalMeasurements = product.sizes.length * MEASUREMENTS_BY_CATEGORY[product.category].length;
      
      if (userState.measurementIndex < totalMeasurements) {
        const nextSize = product.sizes[Math.floor(userState.measurementIndex / MEASUREMENTS_BY_CATEGORY[product.category].length)];
        const nextMeasurement = MEASUREMENTS_BY_CATEGORY[product.category][userState.measurementIndex % MEASUREMENTS_BY_CATEGORY[product.category].length];
        
        bot.sendMessage(chatId, 
          `üìè –ó–∞–º–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ ${nextSize}\n` +
          `–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ä ${nextMeasurement} –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:`
        );
      } else {
        userState.state = ADD_PRODUCT_STATES.WAITING_IMAGES;
        bot.sendMessage(chatId, 
          'üñºÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n' +
          '–ü—Ä–∏–º–µ—Ä: /images/products/shirts/shirt1.jpg, /images/products/shirts/shirt2.jpg'
        );
      }
      break;
      
    case ADD_PRODUCT_STATES.WAITING_IMAGES:
      const imagePaths = text.split(',').map(path => path.trim());
      product.images = imagePaths;
      product.image_url = imagePaths[0]; // –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ
      product.image_alt_texts = imagePaths.map(() => product.name);
      
      userState.state = ADD_PRODUCT_STATES.WAITING_FEATURES;
      bot.sendMessage(chatId, 
        '‚ú® –í–≤–µ–¥–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ "–Ω–µ—Ç" –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã)\n' +
        '–ü—Ä–∏–º–µ—Ä: –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –£–¥–æ–±–Ω–∞—è –ø–æ—Å–∞–¥–∫–∞, –õ–µ–≥–∫–∏–π —É—Ö–æ–¥'
      );
      break;
      
    case ADD_PRODUCT_STATES.WAITING_FEATURES:
      if (text.toLowerCase() !== '–Ω–µ—Ç') {
        product.features = text.split(',').map(feature => feature.trim());
      } else {
        product.features = [];
      }
      userState.state = ADD_PRODUCT_STATES.WAITING_IS_NEW;
      bot.sendMessage(chatId, 'üÜï –≠—Ç–æ –Ω–æ–≤–∏–Ω–∫–∞?', getYesNoMenu());
      break;
      
    case ADD_PRODUCT_STATES.WAITING_IS_NEW:
      product.is_new = text === '‚úÖ –î–∞';
      product.in_stock = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –Ω–∞–ª–∏—á–∏–∏
      
      userState.state = ADD_PRODUCT_STATES.CONFIRM;
      await showProductPreview(chatId, product);
      break;
      
    case ADD_PRODUCT_STATES.CONFIRM:
      if (text === '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
        await saveProduct(chatId, product);
      } else if (text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') {
        userStates.delete(chatId);
        bot.sendMessage(chatId, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', getMainMenu());
      } else {
        bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –∏–ª–∏ "–û—Ç–º–µ–Ω–∏—Ç—å".');
      }
      break;
  }
  
  userStates.set(chatId, userState);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —Ç–æ–≤–∞—Ä–∞
async function showProductPreview(chatId, product) {
  const preview = `
üõçÔ∏è *–ü—Ä–µ–≤—å—é —Ç–æ–≤–∞—Ä–∞:*

üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${product.name}
üí∞ *–†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:* ${product.real_price} —Ä—É–±.
üè∑Ô∏è *–ó–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è —Ü–µ–Ω–∞:* ${product.fake_original_price} —Ä—É–±.
üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${product.category}
${product.subcategory ? `üìÅ *–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:* ${product.subcategory}\n` : ''}
${product.color ? `üé® *–¶–≤–µ—Ç:* ${product.color}\n` : ''}
üè∑Ô∏è *–ë—Ä–µ–Ω–¥:* ${product.brand}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${product.description}
üìè *–†–∞–∑–º–µ—Ä—ã:* ${product.sizes.join(', ')}
üì¶ *–û—Å—Ç–∞—Ç–∫–∏:* ${Object.entries(product.stock_quantity).map(([size, qty]) => `${size}: ${qty}`).join(', ')}
üñºÔ∏è *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:* ${product.images.length} —à—Ç.
${product.features && product.features.length > 0 ? `‚ú® *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:* ${product.features.join(', ')}\n` : ''}
üÜï *–ù–æ–≤–∏–Ω–∫–∞:* ${product.is_new ? '–î–∞' : '–ù–µ—Ç'}
  `;
  
  bot.sendMessage(chatId, preview, {
    parse_mode: 'Markdown',
    reply_markup: {
      keyboard: [
        ['‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function saveProduct(chatId, product) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä
    const { data, error } = await supabase
      .from('products')
      .insert([product])
      .select();
    
    if (error) throw error;
    
    const savedProduct = data[0];
    
    // –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (userStates.get(chatId)?.currentMeasurements) {
      const measurements = userStates.get(chatId).currentMeasurements;
      const measurementRecords = [];
      
      for (const [size, values] of Object.entries(measurements)) {
        measurementRecords.push({
          product_id: savedProduct.id,
          size: size,
          measurement_a: values['A'] || null,
          measurement_b: values['B'] || null,
          measurement_c: values['C'] || null,
          measurement_d: values['D'] || null
        });
      }
      
      if (measurementRecords.length > 0) {
        const { error: measurementError } = await supabase
          .from('measurements')
          .insert(measurementRecords);
        
        if (measurementError) {
          console.error('Error saving measurements:', measurementError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        }
      }
    }
    
    userStates.delete(chatId);
    bot.sendMessage(chatId, 
      `‚úÖ *–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –∑–∞–º–µ—Ä–∞–º–∏!*\n\n` +
      `üÜî ID: ${savedProduct.id}\n` +
      `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}`, 
      { ...getMainMenu(), parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('Error saving product:', error);
    bot.sendMessage(chatId, 
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${error.message}\n\n` +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
    );
  }
}

// –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function startEditProduct(chatId) {
  userStates.set(chatId, {
    action: 'edit_product',
    state: EDIT_PRODUCT_STATES.WAITING_PRODUCT_ID
  });
  
  bot.sendMessage(chatId, 
    '‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*\n\n' +
    'üÜî –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:', 
    { parse_mode: 'Markdown' }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function handleEditProductState(chatId, text, userState) {
  const { state } = userState;
  
  switch (state) {
    case EDIT_PRODUCT_STATES.WAITING_PRODUCT_ID:
      await findAndSelectProduct(chatId, text, userState);
      break;
      
    case EDIT_PRODUCT_STATES.WAITING_FIELD:
      await selectFieldToEdit(chatId, text, userState);
      break;
      
    case EDIT_PRODUCT_STATES.WAITING_VALUE:
      await updateProductField(chatId, text, userState);
      break;
  }
}

// –ù–∞–π—Ç–∏ –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function findAndSelectProduct(chatId, searchTerm, userState) {
  try {
    let query = supabase.from('products').select('*');
    
    // –ï—Å–ª–∏ —ç—Ç–æ UUID, –∏—â–µ–º –ø–æ ID
    if (searchTerm.length === 36 && searchTerm.includes('-')) {
      query = query.eq('id', searchTerm);
    } else {
      // –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      query = query.ilike('name', `%${searchTerm}%`);
    }
    
    const { data, error } = await query.limit(10);
    
    if (error) throw error;
    
    if (data.length === 0) {
      bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å:');
      return;
    }
    
    if (data.length === 1) {
      userState.product = data[0];
      userState.state = EDIT_PRODUCT_STATES.WAITING_FIELD;
      await showEditMenu(chatId, data[0]);
    } else {
      // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
      let message = 'üìã *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:*\n\n';
      data.forEach((product, index) => {
        message += `${index + 1}. ${product.name} (${product.price} —Ä—É–±.)\n`;
        message += `   ID: \`${product.id}\`\n\n`;
      });
      message += '–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:';
      
      bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    }
    
    userStates.set(chatId, userState);
  } catch (error) {
    console.error('Error finding product:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function showEditMenu(chatId, product) {
  const message = `
‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:*
üìù ${product.name}

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
  `;
  
  bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: {
      keyboard: [
        ['üìù –ù–∞–∑–≤–∞–Ω–∏–µ', 'üí∞ –¶–µ–Ω–∞'],
        ['üè∑Ô∏è –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π', 'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è'],
        ['üé® –¶–≤–µ—Ç', 'üìù –û–ø–∏—Å–∞–Ω–∏–µ'],
        ['üìè –†–∞–∑–º–µ—Ä—ã', 'üì¶ –û—Å—Ç–∞—Ç–∫–∏'],
        ['‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'],
        ['üÜï –ù–æ–≤–∏–Ω–∫–∞', 'üè∑Ô∏è –†–∞—Å–ø—Ä–æ–¥–∞–∂–∞'],
        ['üëÅÔ∏è –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∞']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
}

// –í—ã–±—Ä–∞—Ç—å –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function selectFieldToEdit(chatId, fieldName, userState) {
  const fieldMap = {
    'üìù –ù–∞–∑–≤–∞–Ω–∏–µ': 'name',
    'üí∞ –¶–µ–Ω–∞': 'real_price',
    'üè∑Ô∏è –ó–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è —Ü–µ–Ω–∞': 'fake_original_price',
    'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è': 'category',
    'üé® –¶–≤–µ—Ç': 'color',
    'üìù –û–ø–∏—Å–∞–Ω–∏–µ': 'description',
    'üìè –†–∞–∑–º–µ—Ä—ã': 'sizes',
    'üì¶ –û—Å—Ç–∞—Ç–∫–∏': 'stock_quantity',
    '‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏': 'features',
    'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': 'images',
    'üÜï –ù–æ–≤–∏–Ω–∫–∞': 'is_new',
    'üëÅÔ∏è –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å': 'in_stock'
  };
  
  const field = fieldMap[fieldName];
  if (!field) {
    bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.');
    return;
  }
  
  userState.editField = field;
  userState.state = EDIT_PRODUCT_STATES.WAITING_VALUE;
  
  let prompt = '';
  const currentValue = userState.product[field];
  
  switch (field) {
    case 'name':
      prompt = `üìù –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${currentValue}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`;
      break;
    case 'real_price':
      prompt = `üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentValue} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:`;
      break;
    case 'fake_original_price':
      prompt = `üè∑Ô∏è –¢–µ–∫—É—â–∞—è –∑–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è —Ü–µ–Ω–∞: ${currentValue} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞—á–µ—Ä–∫–Ω—É—Ç—É—é —Ü–µ–Ω—É:`;
      break;
    case 'category':
      prompt = `üìÇ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${currentValue}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:`;
      bot.sendMessage(chatId, prompt, getCategoryMenu());
      return;
    case 'color':
      prompt = `üé® –¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç: ${currentValue || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç:`;
      break;
    case 'description':
      prompt = `üìù –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${currentValue}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:`;
      break;
    case 'features':
      prompt = `‚ú® –¢–µ–∫—É—â–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${currentValue && currentValue.length > 0 ? currentValue.join(', ') : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:`;
      break;
    case 'images':
      prompt = `üñºÔ∏è –¢–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${currentValue && currentValue.length > 0 ? currentValue.length + ' —à—Ç.' : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:`;
      break;
    case 'is_new':
    case 'in_stock':
      const labels = {
        'is_new': '–Ω–æ–≤–∏–Ω–∫–∞',
        'in_stock': '–Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ'
      };
      prompt = `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${labels[field]}): ${currentValue ? '–î–∞' : '–ù–µ—Ç'}\n–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞:`;
      bot.sendMessage(chatId, prompt, getYesNoMenu());
      return;
    default:
      prompt = `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è ${fieldName}:`;
  }
  
  bot.sendMessage(chatId, prompt);
  userStates.set(chatId, userState);
}

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ —Ç–æ–≤–∞—Ä–∞
async function updateProductField(chatId, newValue, userState) {
  try {
    const { product, editField } = userState;
    let processedValue = newValue;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É –ø–æ–ª—è
    switch (editField) {
      case 'real_price':
        processedValue = parseFloat(newValue);
        if (isNaN(processedValue) || processedValue <= 0) {
          bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):');
          return;
        }
        break;
        
      case 'fake_original_price':
        processedValue = parseFloat(newValue);
        if (isNaN(processedValue) || processedValue <= 0) {
          bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞—á–µ—Ä–∫–Ω—É—Ç—É—é —Ü–µ–Ω—É:');
          return;
        }
        break;
        
      case 'features':
        if (newValue.toLowerCase() === '—É–¥–∞–ª–∏—Ç—å' || newValue.toLowerCase() === '–Ω–µ—Ç') {
          processedValue = [];
        } else {
          processedValue = newValue.split(',').map(feature => feature.trim());
        }
        break;
        
      case 'images':
        processedValue = newValue.split(',').map(path => path.trim());
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await supabase
          .from('products')
          .update({ 
            images: processedValue,
            image_url: processedValue[0],
            image_alt_texts: processedValue.map(() => product.name)
          })
          .eq('id', product.id);
        
        userStates.delete(chatId);
        bot.sendMessage(chatId, 
          `‚úÖ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n` +
          `üìù –¢–æ–≤–∞—Ä: ${product.name}\n` +
          `üñºÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${processedValue.length}`, 
          { ...getMainMenu(), parse_mode: 'Markdown' }
        );
        return;
        
      case 'is_new':
      case 'in_stock':
        processedValue = newValue === '‚úÖ –î–∞';
        break;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { error } = await supabase
      .from('products')
      .update({ [editField]: processedValue })
      .eq('id', product.id);
    
    if (error) throw error;
    
    userStates.delete(chatId);
    bot.sendMessage(chatId, 
      `‚úÖ *–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n` +
      `üìù –¢–æ–≤–∞—Ä: ${product.name}\n` +
      `üîÑ –ü–æ–ª–µ: ${editField}\n` +
      `‚ú® –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${processedValue}`, 
      { ...getMainMenu(), parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('Error updating product:', error);
    bot.sendMessage(chatId, 
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${error.message}`
    );
  }
}

// –ù–∞—á–∞—Ç—å —Å–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–∞
async function startHideProduct(chatId) {
  userStates.set(chatId, {
    action: 'hide_product'
  });
  
  bot.sendMessage(chatId, 
    'üëÅÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Ç–æ–≤–∞—Ä–∞*\n\n' +
    'üÜî –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è:', 
    { parse_mode: 'Markdown' }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞
async function handleHideProductState(chatId, text, userState) {
  await findAndToggleProductVisibility(chatId, text);
}

// –ù–∞–π—Ç–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
async function findAndToggleProductVisibility(chatId, searchTerm) {
  try {
    let query = supabase.from('products').select('*');
    
    if (searchTerm.length === 36 && searchTerm.includes('-')) {
      query = query.eq('id', searchTerm);
    } else {
      query = query.ilike('name', `%${searchTerm}%`);
    }
    
    const { data, error } = await query.limit(10);
    
    if (error) throw error;
    
    if (data.length === 0) {
      bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }
    
    if (data.length === 1) {
      const product = data[0];
      const newStatus = !product.in_stock;
      
      const { error: updateError } = await supabase
        .from('products')
        .update({ in_stock: newStatus })
        .eq('id', product.id);
      
      if (updateError) throw updateError;
      
      userStates.delete(chatId);
      bot.sendMessage(chatId, 
        `‚úÖ *–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω!*\n\n` +
        `üìù –¢–æ–≤–∞—Ä: ${product.name}\n` +
        `üëÅÔ∏è –°—Ç–∞—Ç—É—Å: ${newStatus ? '‚úÖ –ü–æ–∫–∞–∑–∞–Ω' : 'üôà –°–∫—Ä—ã—Ç'}`, 
        { ...getMainMenu(), parse_mode: 'Markdown' }
      );
    } else {
      let message = 'üìã *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:*\n\n';
      data.forEach((product, index) => {
        const status = product.in_stock ? '‚úÖ –ü–æ–∫–∞–∑–∞–Ω' : 'üôà –°–∫—Ä—ã—Ç';
        message += `${index + 1}. ${product.name} - ${status}\n`;
        message += `   ID: \`${product.id}\`\n\n`;
      });
      message += '–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞:';
      
      bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error('Error toggling product visibility:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞.');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
async function showProductsList(chatId) {
  try {
    const { data, error } = await supabase
      .from('products')
      .select('id, name, real_price, category, in_stock')
      .order('created_at', { ascending: false })
      .limit(20);
    
    if (error) throw error;
    
    if (data.length === 0) {
      bot.sendMessage(chatId, 'üìã –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }
    
    let message = 'üìã *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20):*\n\n';
    data.forEach((product, index) => {
      const status = product.in_stock ? 'üëÅÔ∏è' : 'üôà';
      message += `${index + 1}. ${status} ${product.name}\n`;
      message += `   üí∞ ${product.real_price} —Ä—É–±. | üìÇ ${product.category}\n`;
      message += `   üÜî \`${product.id}\`\n\n`;
    });
    
    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error fetching products list:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
async function showStatistics(chatId) {
  try {
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('*');
    
    const { data: orders, error: ordersError } = await supabase
      .from('orders')
      .select('*');
    
    if (productsError) throw productsError;
    if (ordersError) throw ordersError;
    
    const totalProducts = products.length;
    const visibleProducts = products.filter(p => p.in_stock).length;
    const newProducts = products.filter(p => p.is_new).length;
    
    const totalOrders = orders.length;
    const newOrders = orders.filter(o => o.status === 'new').length;
    const completedOrders = orders.filter(o => o.status === 'delivered').length;
    
    const totalRevenue = orders
      .filter(o => o.status === 'delivered')
      .reduce((sum, order) => sum + parseFloat(order.total_amount), 0);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º
    const { data: promoCodes } = await supabase
      .from('promo_codes')
      .select('*');
    
    const activePromoCodes = promoCodes ? promoCodes.filter(p => p.is_active).length : 0;
    const totalPromoCodes = promoCodes ? promoCodes.length : 0;
    
    const message = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:*

üõçÔ∏è *–¢–æ–≤–∞—Ä—ã:*
‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}
‚Ä¢ –í–∏–¥–∏–º—ã—Ö: ${visibleProducts}
‚Ä¢ –ù–æ–≤–∏–Ω–æ–∫: ${newProducts}


üé´ *–ü—Ä–æ–º–æ–∫–æ–¥—ã:*
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${totalPromoCodes}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activePromoCodes}

üì¶ *–ó–∞–∫–∞–∑—ã:*
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}
‚Ä¢ –ù–æ–≤—ã—Ö: ${newOrders}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: ${completedOrders}

üí∞ *–í—ã—Ä—É—á–∫–∞:*
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${totalRevenue.toFixed(2)} —Ä—É–±.
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${totalOrders > 0 ? (totalRevenue / totalOrders).toFixed(2) : 0} —Ä—É–±.
    `;
    
    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error fetching statistics:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
async function showPromoCodeMenu(chatId) {
  userStates.set(chatId, {
    action: 'promo_menu'
  });
  
  bot.sendMessage(chatId, 
    'üé´ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏*\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
    { ...getPromoCodeMenu(), parse_mode: 'Markdown' }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
async function handlePromoMenuState(chatId, text, userState) {
  switch (text) {
    case '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥':
      await startAddPromoCode(chatId);
      break;
    case 'üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤':
      await showPromoCodesList(chatId);
      break;
    case '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥':
      bot.sendMessage(chatId, 'üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
      break;
    case 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥':
      bot.sendMessage(chatId, 'üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
      break;
    case '‚ùå –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
      userStates.delete(chatId);
      bot.sendMessage(chatId, '‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', getMainMenu());
      break;
    default:
      bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.', getPromoCodeMenu());
  }
}

// –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
async function startAddPromoCode(chatId) {
  userStates.set(chatId, {
    action: 'add_promo',
    state: PROMO_CODE_STATES.WAITING_CODE,
    promo: {}
  });
  
  bot.sendMessage(chatId, 
    '‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n' +
    'üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: SHIRTS10):', 
    { parse_mode: 'Markdown' }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
async function handleAddPromoState(chatId, text, userState) {
  const { state, promo } = userState;
  
  switch (state) {
    case PROMO_CODE_STATES.WAITING_CODE:
      promo.code = text.toUpperCase();
      userState.state = PROMO_CODE_STATES.WAITING_NAME;
      bot.sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:');
      break;
      
    case PROMO_CODE_STATES.WAITING_NAME:
      promo.name = text;
      userState.state = PROMO_CODE_STATES.WAITING_DESCRIPTION;
      bot.sendMessage(chatId, 'üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:');
      break;
      
    case PROMO_CODE_STATES.WAITING_DESCRIPTION:
      promo.description = text;
      userState.state = PROMO_CODE_STATES.WAITING_DISCOUNT_TYPE;
      bot.sendMessage(chatId, 'üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∏–¥–∫–∏:', getDiscountTypeMenu());
      break;
      
    case PROMO_CODE_STATES.WAITING_DISCOUNT_TYPE:
      if (text === 'üìä –ü—Ä–æ—Ü–µ–Ω—Ç (%)') {
        promo.discount_type = 'percentage';
        userState.state = PROMO_CODE_STATES.WAITING_DISCOUNT_VALUE;
        bot.sendMessage(chatId, 'üìä –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10):');
      } else if (text === 'üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ (—Ä—É–±.)') {
        promo.discount_type = 'fixed_amount';
        userState.state = PROMO_CODE_STATES.WAITING_DISCOUNT_VALUE;
        bot.sendMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500):');
      } else {
        bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∏–¥–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:', getDiscountTypeMenu());
        return;
      }
      break;
      
    case PROMO_CODE_STATES.WAITING_DISCOUNT_VALUE:
      const discountValue = parseFloat(text);
      if (isNaN(discountValue) || discountValue <= 0) {
        bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):');
        return;
      }
      if (promo.discount_type === 'percentage' && discountValue > 100) {
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100:');
        return;
      }
      promo.discount_value = discountValue;
      userState.state = PROMO_CODE_STATES.WAITING_MIN_ORDER;
      bot.sendMessage(chatId, 'üì¶ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ (–∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):');
      break;
      
    case PROMO_CODE_STATES.WAITING_MIN_ORDER:
      const minOrder = parseFloat(text);
      if (isNaN(minOrder) || minOrder < 0) {
        bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ >= 0):');
        return;
      }
      promo.min_order_amount = minOrder;
      userState.state = PROMO_CODE_STATES.WAITING_MIN_ITEMS;
      bot.sendMessage(chatId, 'üõçÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1):');
      break;
      
    case PROMO_CODE_STATES.WAITING_MIN_ITEMS:
      const minItems = parseInt(text);
      if (isNaN(minItems) || minItems < 1) {
        bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (—á–∏—Å–ª–æ >= 1):');
        return;
      }
      promo.min_items_count = minItems;
      userState.state = PROMO_CODE_STATES.WAITING_CATEGORIES;
      bot.sendMessage(chatId, 
        'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º) –∏–ª–∏ "–≤—Å–µ" –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n' +
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ: ' + CATEGORIES.join(', ')
      );
      break;
      
    case PROMO_CODE_STATES.WAITING_CATEGORIES:
      if (text.toLowerCase() === '–≤—Å–µ') {
        promo.categories = [];
      } else {
        const categories = text.split(',').map(cat => cat.trim().toLowerCase());
        const validCategories = categories.filter(cat => CATEGORIES.includes(cat));
        if (validCategories.length === 0) {
          bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ "–≤—Å–µ":');
          return;
        }
        promo.categories = validCategories;
      }
      userState.state = PROMO_CODE_STATES.WAITING_MAX_USES;
      bot.sendMessage(chatId, 'üî¢ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (–∏–ª–∏ "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"):');
      break;
      
    case PROMO_CODE_STATES.WAITING_MAX_USES:
      if (text.toLowerCase() === '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π') {
        promo.max_uses = null;
      } else {
        const maxUses = parseInt(text);
        if (isNaN(maxUses) || maxUses < 1) {
          bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π":');
          return;
        }
        promo.max_uses = maxUses;
      }
      userState.state = PROMO_CODE_STATES.WAITING_VALID_UNTIL;
      bot.sendMessage(chatId, 'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):');
      break;
      
    case PROMO_CODE_STATES.WAITING_VALID_UNTIL:
      const dateMatch = text.match(/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/);
      if (!dateMatch) {
        bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024):');
        return;
      }
      
      const [, day, month, year] = dateMatch;
      const validUntil = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
      
      if (validUntil <= new Date()) {
        bot.sendMessage(chatId, '‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º:');
        return;
      }
      
      promo.valid_until = validUntil.toISOString();
      promo.current_uses = 0;
      promo.is_active = true;
      
      userState.state = PROMO_CODE_STATES.CONFIRM;
      await showPromoCodePreview(chatId, promo);
      break;
      
    case PROMO_CODE_STATES.CONFIRM:
      if (text === '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
        await savePromoCode(chatId, promo);
      } else if (text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') {
        userStates.delete(chatId);
        bot.sendMessage(chatId, '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', getPromoCodeMenu());
      } else {
        bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –∏–ª–∏ "–û—Ç–º–µ–Ω–∏—Ç—å".');
      }
      break;
  }
  
  userStates.set(chatId, userState);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –ø—Ä–æ–º–æ–∫–æ–¥–∞
async function showPromoCodePreview(chatId, promo) {
  const discountText = promo.discount_type === 'percentage' 
    ? `${promo.discount_value}%` 
    : `${promo.discount_value} —Ä—É–±.`;
    
  const categoriesText = promo.categories.length === 0 
    ? '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' 
    : promo.categories.join(', ');
    
  const maxUsesText = promo.max_uses === null 
    ? '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π' 
    : promo.max_uses.toString();
  
  const preview = `
üé´ *–ü—Ä–µ–≤—å—é –ø—Ä–æ–º–æ–∫–æ–¥–∞:*

üè∑Ô∏è *–ö–æ–¥:* ${promo.code}
üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${promo.name}
üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* ${promo.description}
üí∞ *–°–∫–∏–¥–∫–∞:* ${discountText}
üì¶ *–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:* ${promo.min_order_amount} —Ä—É–±.
üõçÔ∏è *–ú–∏–Ω–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤:* ${promo.min_items_count} —à—Ç.
üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* ${categoriesText}
üî¢ *–ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:* ${maxUsesText}
üìÖ *–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* ${new Date(promo.valid_until).toLocaleDateString('ru-RU')}
  `;
  
  bot.sendMessage(chatId, preview, {
    parse_mode: 'Markdown',
    reply_markup: {
      keyboard: [
        ['‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
async function savePromoCode(chatId, promo) {
  try {
    const { data, error } = await supabase
      .from('promo_codes')
      .insert([promo])
      .select();
    
    if (error) throw error;
    
    userStates.delete(chatId);
    bot.sendMessage(chatId, 
      `‚úÖ *–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n\n` +
      `üè∑Ô∏è –ö–æ–¥: ${promo.code}\n` +
      `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${promo.name}`, 
      { ...getPromoCodeMenu(), parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('Error saving promo code:', error);
    bot.sendMessage(chatId, 
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${error.message}\n\n` +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
    );
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
async function showPromoCodesList(chatId) {
  try {
    const { data, error } = await supabase
      .from('promo_codes')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (error) throw error;
    
    if (data.length === 0) {
      bot.sendMessage(chatId, 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }
    
    let message = 'üé´ *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):*\n\n';
    data.forEach((promo, index) => {
      const status = promo.is_active ? '‚úÖ' : '‚ùå';
      const discountText = promo.discount_type === 'percentage' 
        ? `${promo.discount_value}%` 
        : `${promo.discount_value} —Ä—É–±.`;
      
      message += `${index + 1}. ${status} ${promo.code} (-${discountText})\n`;
      message += `   üìù ${promo.name}\n`;
      message += `   üìÖ –î–æ ${new Date(promo.valid_until).toLocaleDateString('ru-RU')}\n`;
      message += `   üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${promo.current_uses}${promo.max_uses ? `/${promo.max_uses}` : ''}\n\n`;
    });
    
    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error fetching promo codes list:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

console.log('ü§ñ Telegram Admin Bot –∑–∞–ø—É—â–µ–Ω!');