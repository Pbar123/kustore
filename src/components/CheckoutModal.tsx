import React, { useState } from 'react';
import { X, Package, CreditCard, MapPin, Phone, Mail, User } from 'lucide-react';
import { useCart } from '../context/CartContext';
import { useAuth } from '../context/AuthContext';
import { OrderItem } from '../types';
import { supabase } from '../lib/supabase';

interface CheckoutModalProps {
  isOpen: boolean;
  onClose: () => void;
  appliedPromoCode?: string;
  promoDiscount?: number;
  finalTotal?: number;
}

export function CheckoutModal({ 
  isOpen, 
  onClose, 
  appliedPromoCode = '', 
  promoDiscount = 0,
  finalTotal 
}: CheckoutModalProps) {
  const { state, dispatch } = useCart();
  const { state: authState } = useAuth();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  
  const orderTotal = finalTotal || state.total;
  
  const [formData, setFormData] = useState({
    customer_name: authState.user?.first_name || '',
    customer_phone: '',
    customer_email: '',
    delivery_city: '',
    delivery_postal_code: '',
    delivery_street: '',
    delivery_house: '',
    delivery_apartment: '',
    delivery_method: 'boxberry' as 'boxberry' | 'russian_post' | 'cdek',
    payment_method: 'bank_transfer' as 'bank_transfer'
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  if (!isOpen) return null;

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.customer_name.trim()) {
      newErrors.customer_name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }
    
    if (!formData.customer_phone.trim()) {
      newErrors.customer_phone = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (!/^[\+]?[0-9\s\-\(\)]{10,}$/.test(formData.customer_phone)) {
      newErrors.customer_phone = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }
    
    if (!formData.delivery_city.trim()) {
      newErrors.delivery_city = '–ì–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }
    
    if (!formData.delivery_postal_code.trim()) {
      newErrors.delivery_postal_code = '–ò–Ω–¥–µ–∫—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (!/^\d{6}$/.test(formData.delivery_postal_code)) {
      newErrors.delivery_postal_code = '–ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä';
    }
    
    if (!formData.delivery_street.trim()) {
      newErrors.delivery_street = '–£–ª–∏—Ü–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }
    
    if (!formData.delivery_house.trim()) {
      newErrors.delivery_house = '–ù–æ–º–µ—Ä –¥–æ–º–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsSubmitting(true);
    
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
      const orderItems: OrderItem[] = state.items.map(item => ({
        product_id: item.product.id,
        product_name: item.product.name,
        product_image: item.product.image_url,
        size: item.size,
        quantity: item.quantity,
        price: Number(item.product.real_price),
        total: Number(item.product.real_price * item.quantity)
      }));

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id - –º–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
      const userId = authState.user?.telegram_id || null;
      
      console.log('Creating order with user_id:', userId);
      console.log('Auth state:', authState);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { data: order, error } = await supabase
        .from('orders')
        .insert({
          user_id: userId,
          items: orderItems,
          total_amount: Number(orderTotal),
          customer_name: formData.customer_name,
          customer_phone: formData.customer_phone,
          customer_email: formData.customer_email,
          delivery_address: `${formData.delivery_city}, ${formData.delivery_postal_code}, ${formData.delivery_street}, –¥. ${formData.delivery_house}${formData.delivery_apartment ? `, –∫–≤. ${formData.delivery_apartment}` : ''}`,
          delivery_method: formData.delivery_method,
          payment_method: formData.payment_method
        })
        .select()
        .single();

      if (error) {
        console.error('Database error creating order:', error);
        console.error('Error details:', {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        });
        throw error;
      }

      console.log('Order created successfully:', order);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      try {
        await sendTelegramNotification(order.id, orderItems, formData, orderTotal, appliedPromoCode, promoDiscount);
      } catch (telegramError) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram:', telegramError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
      }

      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      dispatch({ type: 'CLEAR_CART' });
      
      setIsSuccess(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.';
      if (error instanceof Error) {
        if (error.message.includes('row-level security')) {
          errorMessage = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        } else if (error.message.includes('duplicate key')) {
          errorMessage = '–ó–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.';
        } else if (error.message.includes('foreign key')) {
          errorMessage = '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        } else {
          errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
        }
      }
      
      alert(errorMessage);
    } finally {
      setIsSubmitting(false);
    }
  };

  const sendTelegramNotification = async (
    orderId: string, 
    items: OrderItem[], 
    customerData: typeof formData, 
    total: number,
    promoCode?: string,
    discount?: number
  ) => {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      let message = `
üõçÔ∏è *–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderId.slice(-8)}*

üë§ *–ö–ª–∏–µ–Ω—Ç:*
‚Ä¢ –ò–º—è: ${customerData.customer_name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${customerData.customer_phone}
${customerData.customer_email ? `‚Ä¢ Email: ${customerData.customer_email}` : ''}

üì¶ *–¢–æ–≤–∞—Ä—ã:*
${items.map(item => `‚Ä¢ ${item.product_name} (${item.size}) x${item.quantity} = ${item.total} —Ä—É–±.`).join('\n')}
`;

      if (promoCode && discount && discount > 0) {
        const subtotal = items.reduce((sum, item) => sum + item.total, 0);
        message += `\nüí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:*\n`;
        message += `‚Ä¢ –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: ${subtotal} —Ä—É–±.\n`;
        message += `‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥: ${promoCode} (-${discount} —Ä—É–±.)\n`;
        message += `‚Ä¢ –ö –æ–ø–ª–∞—Ç–µ: ${total} —Ä—É–±.\n`;
      } else {
        message += `\nüí∞ *–ò—Ç–æ–≥–æ: ${total} —Ä—É–±.*\n`;
      }

      message += `

üöö *–î–æ—Å—Ç–∞–≤–∫–∞:*
‚Ä¢ –°–ø–æ—Å–æ–±: ${getDeliveryMethodName(customerData.delivery_method)}
‚Ä¢ –ê–¥—Ä–µ—Å: ${customerData.delivery_city}, ${customerData.delivery_postal_code}, ${customerData.delivery_street}, –¥. ${customerData.delivery_house}${customerData.delivery_apartment ? `, –∫–≤. ${customerData.delivery_apartment}` : ''}

üí≥ *–û–ø–ª–∞—Ç–∞:* –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥

‚è∞ ${new Date().toLocaleString('ru-RU')}
      `;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Supabase Edge Function
      const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/send-telegram-notification`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
        },
        body: JSON.stringify({
          message,
          orderId
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram:', errorText);
      } else {
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  };

  const getDeliveryMethodName = (method: string) => {
    switch (method) {
      case 'boxberry': return 'Boxberry';
      case 'russian_post': return '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏';
      case 'cdek': return '–°–î–≠–ö';
      case 'yandex_market': return '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç';
      default: return method;
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  if (isSuccess) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-lg max-w-md w-full p-6 text-center">
          <div className="mb-4">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Package className="h-8 w-8 text-green-600" />
            </div>
            <h2 className="text-2xl font-bold text-gray-900 mb-2">–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!</h2>
            <p className="text-gray-600 mb-4">
              –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.
            </p>
            <div className="bg-blue-50 p-4 rounded-lg mb-4">
              <p className="text-sm text-blue-800">
                <strong>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</strong> –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥<br/>
                –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–∞–º –±—É–¥—É—Ç –≤—ã—Å–ª–∞–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.
              </p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="w-full bg-black text-white py-3 rounded-lg font-medium hover:bg-gray-800 transition-colors"
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-2xl font-bold text-gray-900">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full transition-colors"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {/* –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ */}
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4">–í–∞—à –∑–∞–∫–∞–∑</h3>
            <div className="space-y-3 mb-4">
              {state.items.map((item, index) => (
                <div key={`${item.product.id}-${item.size}`} className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                  <img
                    src={item.product.image_url}
                    alt={item.product.name}
                    className="w-12 h-12 object-cover rounded"
                  />
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900">{item.product.name}</h4>
                    <p className="text-sm text-gray-600">–†–∞–∑–º–µ—Ä: {item.size} ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}</p>
                  </div>
                  <div className="text-right">
                    <p className="font-medium text-gray-900">
                      {(item.product.real_price * item.quantity).toFixed(2)} —Ä—É–±.
                    </p>
                  </div>
                </div>
              ))}
            </div>
            <div className="flex justify-between items-center text-lg font-bold border-t pt-3">
              <span>–ò—Ç–æ–≥–æ:</span>
              <div className="text-right">
                {promoDiscount > 0 && (
                  <>
                    <div className="text-sm text-gray-500 line-through font-normal">
                      {state.total.toFixed(2)} —Ä—É–±.
                    </div>
                    <div className="text-xs text-green-600 font-normal">
                      –ü—Ä–æ–º–æ–∫–æ–¥ {appliedPromoCode}: -{promoDiscount.toFixed(2)} —Ä—É–±.
                    </div>
                  </>
                )}
                <span>{orderTotal.toFixed(2)} —Ä—É–±.</span>
              </div>
            </div>
          </div>

          {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
              <User className="h-5 w-5 mr-2" />
              –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ü–æ–ª–Ω–æ–µ –∏–º—è *
                </label>
                <input
                  type="text"
                  value={formData.customer_name}
                  onChange={(e) => handleInputChange('customer_name', e.target.value)}
                  className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent ${
                    errors.customer_name ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
                />
                {errors.customer_name && (
                  <p className="text-red-500 text-sm mt-1">{errors.customer_name}</p>
                )}
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –¢–µ–ª–µ—Ñ–æ–Ω *
                </label>
                <input
                  type="tel"
                  value={formData.customer_phone}
                  onChange={(e) => handleInputChange('customer_phone', e.target.value)}
                  className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent ${
                    errors.customer_phone ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="+7 (999) 123-45-67"
                />
                {errors.customer_phone && (
                  <p className="text-red-500 text-sm mt-1">{errors.customer_phone}</p>
                )}
              </div>
              
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                </label>
                <input
                  type="email"
                  value={formData.customer_email}
                  onChange={(e) => handleInputChange('customer_email', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent"
                  placeholder="ivan@example.com"
                />
              </div>
            </div>
          </div>

          {/* –î–æ—Å—Ç–∞–≤–∫–∞ */}
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
              <MapPin className="h-5 w-5 mr-2" />
              –î–æ—Å—Ç–∞–≤–∫–∞
            </h3>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
              </label>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                {[
                  { value: 'boxberry', label: 'Boxberry', desc: '–ü—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏' },
                  { value: 'russian_post', label: '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏', desc: '–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –¥–æ–º' },
                  { value: 'cdek', label: '–°–î–≠–ö', desc: '–ü—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏' },
                ].map((method) => (
                  <label
                    key={method.value}
                    className={`flex items-center p-3 border rounded-lg cursor-pointer transition-colors ${
                      formData.delivery_method === method.value
                        ? 'border-black bg-gray-50'
                        : 'border-gray-300 hover:border-gray-400'
                    }`}
                  >
                    <input
                      type="radio"
                      name="delivery_method"
                      value={method.value}
                      checked={formData.delivery_method === method.value}
                      onChange={(e) => handleInputChange('delivery_method', e.target.value)}
                      className="sr-only"
                    />
                    <div>
                      <div className="font-medium text-gray-900">{method.label}</div>
                      <div className="text-sm text-gray-600">{method.desc}</div>
                    </div>
                  </label>
                ))}
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ *
              </label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ì–æ—Ä–æ–¥ *
                  </label>
                  <input
                    type="text"
                    value={formData.delivery_city}
                    onChange={(e) => handleInputChange('delivery_city', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent ${
                      errors.delivery_city ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="–ú–æ—Å–∫–≤–∞"
                  />
                  {errors.delivery_city && (
                    <p className="text-red-500 text-sm mt-1">{errors.delivery_city}</p>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ò–Ω–¥–µ–∫—Å *
                  </label>
                  <input
                    type="text"
                    value={formData.delivery_postal_code}
                    onChange={(e) => handleInputChange('delivery_postal_code', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent ${
                      errors.delivery_postal_code ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="123456"
                  />
                  {errors.delivery_postal_code && (
                    <p className="text-red-500 text-sm mt-1">{errors.delivery_postal_code}</p>
                  )}
                </div>
                
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –£–ª–∏—Ü–∞ *
                  </label>
                  <input
                    type="text"
                    value={formData.delivery_street}
                    onChange={(e) => handleInputChange('delivery_street', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent ${
                      errors.delivery_street ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="—É–ª. –õ–µ–Ω–∏–Ω–∞"
                  />
                  {errors.delivery_street && (
                    <p className="text-red-500 text-sm mt-1">{errors.delivery_street}</p>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –î–æ–º *
                  </label>
                  <input
                    type="text"
                    value={formData.delivery_house}
                    onChange={(e) => handleInputChange('delivery_house', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent ${
                      errors.delivery_house ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="15"
                  />
                  {errors.delivery_house && (
                    <p className="text-red-500 text-sm mt-1">{errors.delivery_house}</p>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ö–≤–∞—Ä—Ç–∏—Ä–∞/–û—Ñ–∏—Å
                  </label>
                  <input
                    type="text"
                    value={formData.delivery_apartment}
                    onChange={(e) => handleInputChange('delivery_apartment', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent"
                    placeholder="25"
                  />
                </div>
              </div>
            </div>
          </div>

          {/* –û–ø–ª–∞—Ç–∞ */}
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
              <CreditCard className="h-5 w-5 mr-2" />
              –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            </h3>
            <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center">
                <input
                  type="radio"
                  id="bank_transfer"
                  name="payment_method"
                  value="bank_transfer"
                  checked={true}
                  readOnly
                  className="mr-3"
                />
                <label htmlFor="bank_transfer" className="font-medium text-gray-900">
                  –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
                </label>
              </div>
              <p className="text-sm text-blue-800 mt-2">
                –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–∞–º –±—É–¥—É—Ç –≤—ã—Å–ª–∞–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã. 
                –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç.
              </p>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
          <div className="flex space-x-4">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className="flex-1 px-6 py-3 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ...' : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'}
            </button>
          </div>
        </form>
      </div>

    </div>
  );
}